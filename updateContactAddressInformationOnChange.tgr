trigger updateContactAddressInformationOnChange on Site__c (before update) {

	Map<Id,Site__c> sitesWithNewAddresses = new Map<Id, Site__c>();

    for(Integer i = 0; i < Trigger.new.size(); i++) {
    	if(
               (Trigger.old[i].Site_Street__c != Trigger.new[i].Site_Street__c)
            || (Trigger.old[i].Site_Address_2__c != Trigger.new[i].Site_Address_2__c)
            || (Trigger.old[i].Site_Address_3__c != Trigger.new[i].Site_Address_3__c)
            || (Trigger.old[i].Site_City__c != Trigger.new[i].Site_City__c)
            || (Trigger.old[i].Site_County_State_Province__c != Trigger.new[i].Site_County_State_Province__c)
            || (Trigger.old[i].Site_Zip_Postcode__c != Trigger.new[i].Site_Zip_Postcode__c)            
            || (Trigger.old[i].Country__c != Trigger.new[i].Country__c)            
          ) {
            sitesWithNewAddresses.put(Trigger.old[i].id,Trigger.new[i]);
        }
    }
    
    //List of Contact at primary and alternate addresses for Site
    List<Contact> primeUpdatedContacts = new List<Contact>();
    List<Contact> alternateUpdatedContacts = new List<Contact>();
    
    //Iterate through list of primary address contacts and update them
    for(Contact c : [SELECT Id, Site_Name__c, Primary_Zip_Postcode__c, Primary_Street__c, Primary_County_State_Province__c, 
                            Primary_Country__c, Primary_City__c, Primary_Address_3__c, Primary_Address_2__c 
                     FROM Contact
                     WHERE Site_Name__c in :sitesWithNewAddresses.keySet()]) 
    {
    	Site__c parentSite = sitesWithNewAddresses.get(c.Site_Name__c);
        c.Primary_Street__c = parentSite.Site_Street__c;
        c.Primary_Address_2__c = parentSite.Site_Address_2__c;
        c.Primary_Address_3__c = parentSite.Site_Address_3__c;                 
        c.Primary_City__c = parentSite.Site_City__c;                
        c.Primary_County_State_Province__c = parentSite.Site_County_State_Province__c;
        c.Primary_Zip_Postcode__c = parentSite.Site_Zip_Postcode__c;             
        c.Primary_Country__c = parentSite.Country__c;
        
        //Add contacts to be updated to a list and bulk update instead of individual updates. Trigger runs faster and we don't hit governer limits.
        primeUpdatedContacts.add(c);
    }
    update primeUpdatedContacts;
    
    //Iterate through the list of alternate address Contacts and update them
    for(Contact c : [SELECT Id, Alternate_Site__c, Secondary_Zip_Postcode__c, Secondary_Street__c, Secondary_County_State_Province__c, Secondary_Country__c, Secondary_City__c, Secondary_Address_3__c, Secondary_Address_2__c  FROM Contact WHERE Alternate_Site__c in :sitesWithNewAddresses.keySet()]) 
    {
    	Site__c parentSite = sitesWithNewAddresses.get(c.Alternate_Site__c);
        c.Secondary_Street__c = parentSite.Site_Street__c;
        c.Secondary_Address_2__c = parentSite.Site_Address_2__c;
        c.Secondary_Address_3__c = parentSite.Site_Address_3__c;                 
        c.Secondary_City__c = parentSite.Site_City__c;                
        c.Secondary_County_State_Province__c = parentSite.Site_County_State_Province__c;
        c.Secondary_Zip_Postcode__c = parentSite.Site_Zip_Postcode__c;             
        c.Secondary_Country__c = parentSite.Country__c;
        
        alternateUpdatedContacts.add(c);
    }
    update alternateUpdatedContacts;
}